{"version":3,"sources":["registerServiceWorker.ts","containers/header/index.tsx","logo.svg","components/currency/index.js","components/calculator/index.js","containers/main/index.tsx","router/index.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Header","props","className","CurrencyTable","name","value","toFixed","Calculator","amount","result","onChange","e","target","eur","Math","round","rate","dol","setState","this","placeholder","type","React","Component","Main","renderHeader","data","base","date","renderTable","Object","entries","rates","map","key","onLine","localStorage","getItem","fetch","res","json","setTimeout","setItem","JSON","stringify","err","USD","src","logo","alt","RootRouter","exact","path","component","AddStore","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","header","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.363370ec.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      (window.location as unknown) as string\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker)\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      const header = response.headers.get(\"content-type\") || \"\";\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || header.indexOf(\"javascript\") === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { HeaderComponentProps } from \"types\";\nimport \"./styles.scss\";\n\nconst Header: React.FC<HeaderComponentProps> = (props) => {\n  return <div className=\"main-header\">123</div>;\n};\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\n\nexport const CurrencyTable = ({ name, value }) => {\n  return (\n    <div className=\"table-row\">\n      <p>{name}</p>\n      <p>{value.toFixed(2)}</p>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport default class Calculator extends React.Component {\n  state = { amount: \"\", result: 0 };\n  onChange = e => {\n    const amount = e.target.value;\n    const eur = Math.round((amount * this.props.rate * 100) / 100).toFixed(2);\n    const dol = Math.round(((amount / this.props.rate) * 100) / 100).toFixed(2);\n\n    const result = this.props.name === \"Euro\" ? eur : dol;\n    this.setState({ amount, result });\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"table-row\">\n          <div className=\"table-col\">\n            <label>Input a {this.props.name} amounts</label>\n            <input\n              placeholder=\"0\"\n              type=\"number\"\n              value={this.state.amount}\n              onChange={this.onChange}\n            />\n          </div>\n          <div className=\"table-col\">\n            <p>Result in {this.props.result}</p>\n            <p className=\"resul-val\">{this.state.result}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport logo from \"../../logo.svg\";\nimport { CurrencyTable } from \"../../components/currency\";\nimport Calculator from \"../../components/calculator\";\n\nexport default class Main extends React.Component {\n  state: any = {};\n\n  componentWillMount() {\n    if (!navigator.onLine) {\n      return this.setState({ data: localStorage.getItem(\"data\") });\n    }\n    fetch(\"https://api.exchangeratesapi.io/latest\")\n      .then((res) => res.json())\n      .then((data) =>\n        setTimeout(() => {\n          localStorage.setItem(\"data\", JSON.stringify(data));\n          this.setState({ data });\n        }, 1000)\n      )\n      .catch((err) => this.setState({ data: localStorage.getItem(\"data\") }));\n  }\n\n  renderHeader = () => {\n    const { data } = this.state;\n    console.log(data);\n\n    return (\n      <div className=\"App-header\">\n        <h2>Base currency: {data.base}</h2>\n        <h3>Latest update: {data.date}</h3>\n      </div>\n    );\n  };\n\n  renderTable = () => {\n    return (\n      <div>\n        <div className=\"table-row\">\n          <h4>Currency</h4>\n          <h4>Amount in base</h4>\n        </div>\n        {Object.entries(this.state.data.rates).map(([key, value]) => {\n          const flag = key === \"USD\" || key === \"UAH\";\n          return flag && <CurrencyTable key={key} name={key} value={value} />;\n        })}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.data ? (\n          <div className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h2>Loading...</h2>\n          </div>\n        ) : (\n          <div>\n            <div>\n              {this.renderHeader()}\n              {this.renderTable()}\n            </div>\n            <div className=\"calc-root\">\n              <Calculator\n                result=\"Dollar\"\n                name=\"Euro\"\n                rate={this.state.data.rates.USD}\n              />\n              <Calculator\n                name=\"Dollar\"\n                result=\"Euro\"\n                rate={this.state.data.rates.USD}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Header from \"src/containers/header\";\nimport Main from \"src/containers/main\";\n\nconst RootRouter = (props: any) => {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default RootRouter;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport RootRouter from \"./router/index\";\n\nconst AddStore = () => (\n  //   <Provider store={store}>\n  <RootRouter />\n  //   </Provider>\n);\n\n// var config = {\n//     apiKey: \"AIzaSyDDZI6bO7nY6qLtrh7saRKJx80zvzO4GfM\",\n//     authDomain: \"benzcomunity.firebaseapp.com\",\n//     databaseURL: \"https://benzcomunity.firebaseio.com\",\n//     projectId: \"benzcomunity\",\n//     storageBucket: \"\",\n//     messagingSenderId: \"978542336621\"\n//   };\n//   firebase.initializeApp(config);\n\nReactDOM.render(<AddStore />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}