{"version":3,"sources":["components/currency/index.js","containers/main/index.js","App.js","registerServiceWorker.js","index.js","logo.svg"],"names":["CurrencyTable","_ref","name","value","react_default","a","createElement","className","toFixed","Main","state","renderHeader","data","_this","console","log","base","date","renderTable","Object","entries","rates","map","_ref2","slicedToArray","key","currency_CurrencyTable","_this2","this","fetch","then","res","json","setTimeout","localStorage","setItem","JSON","stringify","setState","catch","err","getItem","navigator","onLine","src","logo","alt","React","Component","App","main_Main","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"oRAEaA,EAAgB,SAAAC,GAAqB,IAAlBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,MACpC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,SAAIH,EAAMK,QAAQ,MCFHC,6MACnBC,MAAQ,KAiBRC,aAAe,WAAM,IACXC,EAASC,EAAKH,MAAdE,KAGR,OAFAE,QAAQC,IAAIH,GAGVR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,4BAAoBM,EAAKI,MACzBZ,EAAAC,EAAAC,cAAA,4BAAoBM,EAAKK,UAK/BC,YAAc,WACZ,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,6BAEDa,OAAOC,QAAQP,EAAKH,MAAME,KAAKS,OAAOC,IAAI,SAAArB,GAAkB,IAAAsB,EAAAJ,OAAAK,EAAA,EAAAL,CAAAlB,EAAA,GAAhBwB,EAAgBF,EAAA,GAAXpB,EAAWoB,EAAA,GAE3D,OADqB,QAARE,GAAyB,QAARA,IACfrB,EAAAC,EAAAC,cAACoB,EAAD,CAAeD,IAAKA,EAAKvB,KAAMuB,EAAKtB,MAAOA,4FApC7C,IAAAwB,EAAAC,KACnBC,MAAM,wFACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAlB,GAAI,OACRqB,WAAW,WACTC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUzB,IAC5Ce,EAAKW,SAAS,CAAE1B,UACf,OAEJ2B,MAAM,SAAAC,GAAG,OAAIb,EAAKW,SAAS,CAAE1B,KAAMsB,aAAaO,QAAQ,YACtDC,UAAUC,QACbf,KAAKU,SAAS,CAAE1B,KAAMsB,aAAaO,QAAQ,2CAgC7C,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXqB,KAAKlB,MAAME,KAMXR,EAAAC,EAAAC,cAAA,WACGsB,KAAKjB,eACLiB,KAAKV,eAPRd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKsC,IAAKC,IAAMtC,UAAU,WAAWuC,IAAI,SACzC1C,EAAAC,EAAAC,cAAA,iCAnDsByC,IAAMC,WCMzBC,mLAJX,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,aAFOF,aCMZG,SAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,4DA4BnC,SAASC,EAAgBC,GACvBhB,UAAUiB,cACPC,SAASF,GACT5B,KAAK,SAAA+B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrD,QACfgC,UAAUiB,cAAcO,WAK1BpD,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBwB,MAAM,SAAA4B,GACLrD,QAAQqD,MAAM,4CAA6CA,KC9DjEC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SDYlC,WACb,GAA6C,kBAAmB9B,UAAW,CAGzE,GADkB,IAAI+B,IAAIC,QAAwBrB,OAAOC,UAC3CqB,SAAWtB,OAAOC,SAASqB,OAIvC,OAGFtB,OAAOuB,iBAAiB,OAAQ,WAC9B,IAAMlB,EAAK,GAAAmB,OAAMH,QAAN,sBAENvB,EAwCX,SAAiCO,GAE/B7B,MAAM6B,GACH5B,KAAK,SAAAgD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxC,UAAUiB,cAAcwB,MAAMrD,KAAK,SAAA+B,GACjCA,EAAauB,aAAatD,KAAK,WAC7BuB,OAAOC,SAAS+B,aAKpB5B,EAAgBC,KAGnBnB,MAAM,WACLzB,QAAQC,IAAI,mEAxDVuE,CAAwB5B,GAHxBD,EAAgBC,MC1BxB6B,sBCRAC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.29b3955c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const CurrencyTable = ({ name, value }) => {\n  return (\n    <div className=\"table-row\">\n      <p>{name}</p>\n      <p>{value.toFixed(2)}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport logo from \"../../logo.svg\";\nimport { CurrencyTable } from \"../../components/currency\";\n\nexport default class Main extends React.Component {\n  state = {};\n\n  componentWillMount() {\n    fetch(\"http://data.fixer.io/api/latest?access_key=81ce1d0236d5f975b89bc55f4a2a7b97&format=1\")\n      .then(res => res.json())\n      .then(data =>\n        setTimeout(() => {\n          localStorage.setItem(\"data\", JSON.stringify(data));\n          this.setState({ data });\n        }, 1000)\n      )\n      .catch(err => this.setState({ data: localStorage.getItem(\"data\") }));\n    if (!navigator.onLine) {\n      this.setState({ data: localStorage.getItem(\"data\") });\n    }\n  }\n\n  renderHeader = () => {\n    const { data } = this.state;\n    console.log(data);\n\n    return (\n      <div className=\"App-header\">\n        <h2>Base currency: {data.base}</h2>\n        <h3>Latest update: {data.date}</h3>\n      </div>\n    );\n  };\n\n  renderTable = () => {\n    return (\n      <div>\n        <div className=\"table-row\">\n          <h4>Currency</h4>\n          <h4>Amount in base</h4>\n        </div>\n        {Object.entries(this.state.data.rates).map(([key, value]) => {\n          const flag = key === \"USD\" || key === \"UAH\";\n          return flag && <CurrencyTable key={key} name={key} value={value} />;\n        })}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {!this.state.data ? (\n          <div className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h2>Loading...</h2>\n          </div>\n        ) : (\n          <div>\n            {this.renderHeader()}\n            {this.renderTable()}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Main from \"./containers/main\";\n\nclass App extends Component {\n  render() {\n    return <Main />;\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}